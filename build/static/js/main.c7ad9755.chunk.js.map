{"version":3,"sources":["components/Person.js","components/Filter.js","components/Notification.js","components/PersonForm.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","persons","searchValue","deletePersonById","personRow","person","key","id","name","number","onClick","searchPerson","filter","toLowerCase","includes","map","Filter","handleSearchChange","value","onChange","Notification","message","errMessage","className","PersonForm","handleFormChange","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","delete","App","useState","setPersons","setNewName","setNewNumber","setSearchValue","setMessage","setErrMessage","useEffect","console","log","personService","initialPersons","addName","event","nameObject","checkedName","indexOf","window","alert","returnedObject","concat","setTimeout","target","preventDefault","confirm","deletedObject","catch","err","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7ad9755.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Person = ({ persons, searchValue, deletePersonById }) => {\n  const personRow = person => {\n    return (\n      <div key={person.id}>\n        <p>\n          {person.name} {person.number}\n          <button onClick={() => deletePersonById(person)}>delete</button>\n        </p>\n      </div>\n    );\n  };\n  const searchPerson = persons.filter(person =>\n    person.name.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  return searchValue === \"\"\n    ? persons.map(person => personRow(person))\n    : searchPerson.map(person => personRow(person));\n};\n\nexport default Person;\n","import React from \"react\";\n\nconst Filter = ({ searchValue, handleSearchChange }) => {\n  return (\n    <div>\n      filter shown with:{\" \"}\n      <input value={searchValue} onChange={handleSearchChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react'\n\nconst Notification = ({ message, errMessage }) => {\n    if (message === null) {\n      return (\n        <div className=\"errMessage\">\n          {errMessage}\n        </div>\n      )\n    }else{\n      return (\n        <div className=\"message\">\n          {message}\n        </div>\n      )\n    }\n  }\n\n  export default Notification","import React from \"react\";\n\nconst PersonForm = ({\n  handleFormChange,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange\n}) => {\n  return (\n    <form onSubmit={handleFormChange}>\n      <div>\n        name:\n        <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number:\n        <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","\nimport axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n  const deletePersonById = id => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request.then(response => response.data);\n  };\n\n  \n  export default { getAll, create,update, deletePersonById }","import React, { useState, useEffect } from \"react\";\nimport Person from \"./components/Person\";\nimport Filter from \"./components/Filter\";\nimport Notification from \"./components/Notification\";\nimport PersonForm from \"./components/PersonForm\";\nimport personService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(0);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [errMessage, setErrMessage] = useState(null);\n\n  useEffect(() => {\n    console.log(\"effect\");\n    personService.getAll().then(initialPersons => {\n      console.log(\"promise fulfilled\");\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n  const handleSearchChange = event => {\n    console.log(event.target.value);\n    setSearchValue(event.target.value);\n  };\n  const handleFormChange = event => {\n    event.preventDefault();\n    addName();\n  };\n\n  const addName = event => {\n    const nameObject = {\n      name: newName,\n      number: newNumber\n      //id: persons.length + 1\n    };\n\n    const checkedName =\n      persons\n        .map(({ name }) => name.toLowerCase())\n        .indexOf(nameObject.name.toLowerCase()) > -1;\n    console.log(checkedName);\n\n    if (checkedName) {\n      window.alert(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n    } else {\n      personService.create(nameObject).then(returnedObject => {\n        setPersons(persons.concat(returnedObject));\n        setNewName(\"\");\n        setNewNumber(0);\n        setMessage(`Added ${newName}`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const deletePersonById = person => {\n    const { id } = person;\n    window.confirm(`Delete ${person.name}?`);\n    personService.deletePersonById(id).then(deletedObject => {\n      setPersons(persons.filter(person => id !== person.id));\n    }).catch(err =>{\n      setErrMessage(\n        `Information of ${person.name} has been removed from the server.`\n      );\n      setTimeout(() => {\n        setMessage(null);\n      }, 1000);\n    })\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} errMessage={errMessage} />\n      <Filter\n        searchValue={searchValue}\n        handleSearchChange={handleSearchChange}\n      />\n      <h3>add</h3>\n      <PersonForm\n        handleFormChange={handleFormChange}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>numbers</h2>\n      <Person\n        persons={persons}\n        searchValue={searchValue}\n        deletePersonById={deletePersonById}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}